#!/bin/bash

set -e
set -o pipefail

log=log.txt
rm -rf ${log}


exit_err() {
   printf "\n--------------------- \n\n"
   printf "\n- exited\n\n"
   echo >&2 "${1}"
   printf "\n-- last logs\n\n"
   cat ${log};
   rm -rf ${log};

   exit 1
}

function cleanup() {
  echo "cleaning up previous deployments"
  ./stop_deployment &> ${log} || true
  printf "cleaned\n\n"
}

trap cleanup EXIT INT QUIT

function pod_ready() {
  kubectl describe pod ${POD_NAME} | awk '/Ready/{if ($2 != "True") exit 1}'
}

function http_proxy_resp() {
  POD_NAME=$(kubectl get pods -l app=secretless-k8s-test -o jsonpath="{.items[0].metadata.name}")
  kubectl exec -it ${POD_NAME} -c echo-server -- \
    env http_proxy=localhost:8000 curl -s localhost:8080
}
function http_resp() {
  POD_NAME=$(kubectl get pods --field-selector=status.phase=Running -l app=secretless-k8s-test -o jsonpath="{.items[0].metadata.name}")
  kubectl exec -it ${POD_NAME} -c echo-server -- curl --connect-timeout 4 -s localhost:8080 &> ${log}
}

function wait_for_CRD() {
  echo "waiting for CRD to be ready"
  until $(kubectl get configurations.secretless.io &> ${log}); do
    printf ".";
    sleep 2;
  done
  echo ""
  echo "ready"
  echo ""
}

function wait_for_pod() {
  echo "waiting for pod to be ready"
  until pod_ready; do
    printf ".";
    sleep 2;
  done
  until http_resp; do
    printf ".";
    sleep 2;
  done
  echo ""
  echo "ready"
  echo ""
}

function assert_on_http_proxy_resp() {
# $1 username
# $2 password
  local resp=$(http_proxy_resp)
  local expected_header="authorization=Basic $(printf "$1:$2" | base64)"

  if printf "${resp}" | grep -q "${expected_header}"; then
    echo "test passed ✔"
  else
    echo "expected to find '${expected_header}', in response:" > ${log}
    echo "${resp}"  >> ${log}
    exit_err "test failed ✗"
  fi
}

function deploy_secretless() {
  echo "secretless sidecar deploying CRD"

  ./deployment.yaml.sh > deployment.yaml 2> ${log} || exit_err "Failed to template deployment.yaml"
  kubectl apply -f deployment.yaml 2> ${log} || exit_err "Failed to deploy CRD"

  echo "deployed"
  echo ""
}

function run_test_case() {
# $1 test description
# $2 manifest
# $3 username
# $4 password
  echo "[TEST] $1"
  echo ""
  echo "applying manifest"
  kubectl apply -f "${CURRENT_DIR}/${2}" &> ${log} || exit_err "failed to $1"
  wait_for_pod

  echo "testing"
  assert_on_http_proxy_resp ${3} ${4}
  echo ""
}

CURRENT_DIR=$(dirname $0)

cleanup

deploy_secretless
wait_for_CRD
wait_for_pod

run_test_case "create configuration object" "first-v1.yaml" user1 password1
run_test_case "update configuration object" "first-v2.yaml" ohnoeswechangedit supersecretpassword

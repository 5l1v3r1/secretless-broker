#!/bin/bash -e

# Generic utilities
. ./utils.sh

# Generic variables about the environment
. ./app_constants.sh

# Application url accessible to local machine
#
# NOTE: This file does not have access to the secrets stored in
# security_admin_secrets.sh.  It knows only this application url:
##################################################
step "Start application"

kubectl --namespace "${APP_NAMESPACE}" \
  apply --filename "etc/quick-start-application.yml"

if [ ! "${SECRETLESS_IMAGE_NAME:-}" == "" ]; then
  image_name="${SECRETLESS_IMAGE_NAME}:${SECRETLESS_IMAGE_TAG}"

  step "Patching deployment with ${image_name}"

  kubectl patch deployment "quick-start-application" \
    --namespace="${APP_NAMESPACE}" \
    --patch """
  spec:
    template:
      spec:
        containers:
          - name: secretless
            image: ${image_name}
"""
fi

step "Making service externally visible"

if is_minikube; then
  APPLICATION_URL="$(minikube service quick-start-application --namespace "${APP_NAMESPACE}" --wait 15 --url)"
else
  readonly external_service_name="${APP_NAMESPACE}-external-svc"
  kubectl expose deployment quick-start-application \
    --namespace="${APP_NAMESPACE}" \
    --type=LoadBalancer \
    --name="${external_service_name}"

  printf "Waiting for Kubernetes to expose the service..."

  until [ "$(kubectl get svc \
    --namespace="${APP_NAMESPACE}" \
    -o jsonpath='{.status.loadBalancer.ingress[0].ip}' \
    "${external_service_name}" 2>/dev/null)" != "" ]; do
    echo -n '.'
    sleep 2
  done

  echo

  external_ip=$(kubectl get svc \
    --namespace="${APP_NAMESPACE}" \
    -o jsonpath='{.status.loadBalancer.ingress[0].ip}' \
    "${external_service_name}")

  APPLICATION_URL="http://${external_ip}:8080"
fi

echo "Using app URL: $APPLICATION_URL"

# Since wait_for_app and kubectl rollout status are both not working...
# We revert to simply pinging the endpoint
printf 'Waiting for application to boot up\n'
printf '(This may take more than 1 minute)\n'

until curl --connect-timeout 3 --silent "${APPLICATION_URL}/pets" >/dev/null; do
  echo -n "."
  sleep 2
done

echo "OK"

##################################################
step "Add a Sample Pet"

# -include includes HTTP headers
curl -include \
  --data '{"name": "Mr. Snuggles"}' \
  --header "Content-Type: application/json" \
  "${APPLICATION_URL}/pet"

##################################################
step "Retrieve All Pets"

curl -include "${APPLICATION_URL}/pets"

echo
echo
echo "*** All finished! Secretless is working! ***"
echo

step "Cleaning up"
./stop || true
